---
// Get the `id`, `title`, and `prompt` props passed to this component
const { id, title = "Try it out: Text generation", prompt = "" } = Astro.props;

// Ensure an ID is provided to prevent errors
if (!id) {
    throw new Error('The `id` prop is required for this component.');
}
---

<script src="https://cdn.tailwindcss.com"></script>

<script define:vars={{ id }}>
document.addEventListener('DOMContentLoaded', () => {
    // Get the container element using the passed-in `id` prop.
    const container = document.getElementById(id);
    if (!container) {
        console.error('Component container not found.');
        return;
    }

    // Now, use querySelector on the container to find the specific elements within it.
    // The IDs are now unique, so we can reliably select them.
    const generateBtn = container.querySelector(`#generateBtn-${id}`);
    const promptInput = container.querySelector(`#promptInput-${id}`);
    const aiText = container.querySelector(`#aiText-${id}`);
    const placeholderText = container.querySelector(`#placeholderText-${id}`);
    const loadingSpinner = container.querySelector(`#loadingSpinner-${id}`);

    // Function to handle the generation process
    const generateText = async () => {
        const prompt = promptInput.value.trim();
        if (!prompt) return;
        
        placeholderText.classList.add('hidden');
        aiText.classList.add('hidden');
        loadingSpinner.classList.remove('hidden');

        try {
            // Use Pollinations text API with prompt and a unique timestamp to prevent caching
            const cacheBuster = Date.now();
            const url = `https://text.pollinations.ai/${encodeURIComponent(prompt)}?_=${cacheBuster}`;
            const response = await axios.get(url);
            
            // The API returns the generated text directly in the response data.
            const generatedText = response.data;

            aiText.textContent = generatedText;
            aiText.classList.remove('hidden');

        } catch (error) {
            console.error('Error fetching text:', error);
            placeholderText.textContent = 'Failed to generate text. Please try again with another prompt';
            placeholderText.classList.remove('hidden');
        } finally {
            loadingSpinner.classList.add('hidden');
        }
    };

    // Check if elements exist before adding event listeners
    if (generateBtn && promptInput) {
        // Click event for the button
        generateBtn.addEventListener('click', generateText);

        // Keydown event for the input field to trigger on "Enter"
        promptInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault(); // Prevent the default form submission behavior
                generateText();
            }
        });
    }
});
</script>
<div id={id}>
    <main class="w-full mb-8 overflow-hidden bg-gray-50">
        <div class="px-4 py-2 text-left text-gray-500 font-mono bg-gray-100">
            {title}
        </div>
        <div class="p-4 flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
            <!-- Left Column: Input Prompt and Generate Button -->
            <div class="flex flex-col md:w-1/2">
                <label for={`promptInput-${id}`} class="text-gray-700 font-semibold mb-2">Enter your prompt:</label>
                <textarea id={`promptInput-${id}`} placeholder="Enter your prompt here..." class=" h-32 p-3 border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none">{prompt}</textarea>
                
                <button id={`generateBtn-${id}`} class="mt-4 bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out">
                    Generate
                </button>
            </div>
            
            <!-- Right Column: AI Response -->
            <div class="md:w-1/2">
                <div class="flex items-center text-gray-700 font-semibold mb-2">
                    <span class="mr-2">ðŸ¤–</span> AI Text
                </div>
                <div id={`textContainer-${id}`} class="flex justify-center items-center h-96 border border-gray-300 bg-gray-200 text-gray-800 overflow-hidden relative p-4 text-left">
                    <p id={`placeholderText-${id}`} class="text-gray-500 text-center">Your generated text will appear here.</p>
                    <div id={`aiText-${id}`} class="hidden text-gray-800 w-full h-full overflow-y-auto"></div>
                    <div id={`loadingSpinner-${id}`} class="hidden absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
                        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
                    </div>
                </div>  
            </div>
        </div>
        <div class="px-4 py-2 text-base text-right text-gray-400">
            Free API provided by <a href="https://pollinations.ai/" target="_blank">pollinations.ai</a>. If you experience errors, try different prompts or try again later.
        </div>
    </main>
</div>
